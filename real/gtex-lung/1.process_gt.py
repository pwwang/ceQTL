"""Process the genotype data from GTex

Files to be generated by this pipeline:
- the genotype matrix file
- the bed file for snp coordinates
- the gene-snp gmt file
"""
# biopipen v0.29.0
from pipen import Pipen
from pipen_args import parser
from biopipen.ns.misc import Shell
from biopipen.ns.bed import BedtoolsIntersect as BedtoolsIntersect_
from biopipen.ns.gene import GenePromoters as GenePromoters_
from biopipen.ns.snp import (
    PlinkFromVcf as PlinkFromVcf_,
    Plink2GTMat as Plink2GTMat_,
    PlinkFilter as PlinkFilter_,
    PlinkIBD as PlinkIBD_,
    PlinkHWE as PlinkHWE_,
    PlinkCallRate as PlinkCallRate_,
    PlinkHet as PlinkHet_,
    PlinkFreq as PlinkFreq_,
    PlinkUpdateName as PlinkUpdateName_,
)

parser.add_argument("--vcf", help="VCF file", required=True)
parser.add_argument(
    "--dbsnp",
    help="The dbsnp file in VCF, used to annotated the variants by RS id.",
    required=True,
)
args = parser.parse_extra_args()


class PlinkFromVcf(PlinkFromVcf_):
    input_data = [args.vcf]
    envs = {
        "chr": "1-22",
        "set_missing_var_ids": None,
    }


class GenePromoters(GenePromoters_):
    input_data = ["/dev/null"]
    envs = {"up": 2500, "notfound": "skip", "sort": True}


class PlinkFilter(PlinkFilter_):
    "Extract variants in gene promoters"
    requires = PlinkFromVcf, GenePromoters
    input_data = lambda ch1, ch2: [(ch1.iloc[0, 0], None, ch2.iloc[0, 0])]
    envs = {"snps_only": True, "keep": True, "vfile_type": "bed0"}


class PlinkCallRate(PlinkCallRate_):
    requires = PlinkFilter
    envs = {"max_iter": 5}


class PlinkHet(PlinkHet_):
    requires = PlinkCallRate
    envs = {"filter": True}


class PlinkHWE(PlinkHWE_):
    requires = PlinkHet
    envs = {"filter": True}


class PlinkIBD(PlinkIBD_):
    requires = PlinkHWE
    envs = {"samid": "{iid}"}


class PlinkFreq(PlinkFreq_):
    requires = PlinkIBD
    envs = {
        "modifier": "x",
        "cutoff": {
            "HOM_REF_CT": 5,
            "HET_REF_ALT1_CT": 5,
            "HOM_ALT1_CT": 5,
        },
        "filter": "lt",
    }


class PlinkUpdateName(PlinkUpdateName_):
    requires = PlinkFreq
    input_data = lambda ch: [(ch.iloc[0, 0], args.dbsnp)]
    envs = {"match_alt": "first_included"}


class VariantCoords(Shell):
    requires = PlinkUpdateName
    output = "outfile:file:variant_coords.bed"
    envs = {
        "cmd": (
            """awk '{print "chr"$1"\\t"$4-1"\\t"$4"\\t"$2"\\t0\\t+\\t"$6"\\t"$5}' """
            """$infile/*.bim > $outfile"""
        )
    }
    export = True


class GeneVarGMT(BedtoolsIntersect_):
    requires = GenePromoters, VariantCoords
    output = "outfile:file:gene_var.gmt"
    envs = {
        "sort": True,
        "wa": True,
        "wb": True,
        "postcmd": (
            "sort -k4,4 $infile | awk "
            """'OFS="\\t" """
            "{arr[$4]=arr[$4] OFS $10} END {for (i in arr) print i, arr[i]}' > $outfile"
        )
    }


class Plink2GTMat(Plink2GTMat_):
    requires = PlinkUpdateName
    envs = {
        "samid": "{iid}",
        "varid": "{varid}",
    }


class ProcessGT(Pipen):
    __doc__ = __doc__
    starts = PlinkFromVcf, GenePromoters


if __name__ == "__main__":
    ProcessGT().run()
